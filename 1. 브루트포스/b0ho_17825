import java.util.*;
import java.io.*;

public class Main {
    static int N = 10;
    static int[] arr;
    static Board[] board;
    static int answer;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        board = new Board[]{new Board(0, new int[]{1, 2, 3, 4, 5}),
                new Board(2, new int[]{2, 3, 4, 5, 10}),
                new Board(4, new int[]{3, 4, 5, 10, 11}),
                new Board(6, new int[]{4, 5, 10, 11, 12}),
                new Board(8, new int[]{5, 10, 11, 12, 13}),
                new Board(10, new int[]{6, 7, 8, 9, 25}),
                new Board(13, new int[]{7, 8, 9, 25, 26}),
                new Board(16, new int[]{8, 9, 25, 26, 27}),
                new Board(19, new int[]{9, 25, 26, 27, 32}),
                new Board(25, new int[]{25, 26, 27, 32, 32}),
                new Board(12, new int[]{11, 12, 13, 14, 17}),
                new Board(14, new int[]{12, 13, 14, 17, 18}),
                new Board(16, new int[]{13, 14, 17, 18, 19}),
                new Board(18, new int[]{14, 17, 18, 19, 20}),
                new Board(20, new int[]{15, 16, 9, 25, 26}),
                new Board(22, new int[]{16, 9, 25, 26, 27}),
                new Board(24, new int[]{9, 25, 26, 27, 32}),
                new Board(22, new int[]{18, 19, 20, 21, 28}),
                new Board(24, new int[]{19, 20, 21, 28, 29}),
                new Board(26, new int[]{20, 21, 28, 29, 30}),
                new Board(28, new int[]{21, 28, 29, 30, 31}),
                new Board(30, new int[]{22, 23, 24, 9, 25}),
                new Board(28, new int[]{23, 24, 9, 25, 26}),
                new Board(27, new int[]{24, 9, 25, 26, 27}),
                new Board(26, new int[]{9, 25, 26, 27, 32}),
                new Board(30, new int[]{26, 27, 32, 32, 32}),
                new Board(35, new int[]{27, 32, 32, 32, 32}),
                new Board(40, new int[]{32, 32, 32, 32, 32}),
                new Board(32, new int[]{29, 30, 31, 27, 32}),
                new Board(34, new int[]{30, 31, 27, 32, 32}),
                new Board(36, new int[]{31, 27, 32, 32, 32}),
                new Board(38, new int[]{27, 32, 32, 32, 32}),
                new Board(0, new int[]{32, 32, 32, 32, 32})
        };

        for (int i = 0; i < 1024 * 1024; i++) {
            calc(i);
        }

        System.out.println(answer);

    }

    public static void calc(int Case) {
        int[] hols = new int[4];
        int[] score = new int[4];
        int[] exist = new int[33];
        exist[0] = 4;

        for (int i = 0; i < N; i++) {
            int now = Case & 3;
            int next = board[hols[now]].pos[arr[i] - 1];

            if (next != 32 && exist[next] > 0) {
                return;
            }

            exist[hols[now]]--;
            exist[next]++;
            hols[now] = next;
            score[now] += board[next].score;
            Case /= 4;

        }

        int sum = 0;
        for (int i = 0; i < 4; i++) {
            sum += score[i];
        }

        answer = Math.max(answer, sum);
    }

    static class Board {
        int score;
        int[] pos;

        Board(int score, int[] pos) {
            this.score = score;
            this.pos = pos;
        }
    }

}
