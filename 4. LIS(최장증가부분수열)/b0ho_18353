import java.util.*;
import java.io.*;

public class Main {
    static int N;
    static int[] arr;
    static int max;
    static int[] dp;
    static StringBuilder answer;

    public static void main(String[] args) throws IOException {
        answer = new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        arr = new int[N];
        //dp를 이용하여 최대 길이를 기억
        dp = new int[N];
        dp[0] = 1;

        //변태 케이스 색출
        if (N == 1) {
            System.out.println(0);
            return;
        }

        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        //2중 for 문으로 O(N^2) 의 시간복잡도
        //N^2으로도 충분
        for (int i = 1; i < N; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                //기본적인 lis 알고리즘, 증가가 아니라 감소라는 조건 차이
                //i 값에 해당하는 dp 마다, 가능한 최대 값을 찾는다
                if (arr[i] < arr[j] && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                }
            }
            //i 마다 lis 갱신
            max = Math.max(max, dp[i]);
        }

        //정답은 제외되어야 하는 수
        answer.append(N - max);
        System.out.print(answer);
    }

}
