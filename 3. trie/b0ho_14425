import java.util.*;
import java.io.*;

public class Main {
    static int N;
    static int M;
    static String[] S;
    static String[] arr;
    static Trie root;
    static int answer;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        root = new Trie();

        S = new String[N];
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            S[i] = st.nextToken();
        }

        arr = new String[M];
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            arr[i] = st.nextToken();
        }

        //집합을 Trie 에 추가한다
        for (int i = 0; i < N; i++) {
            insert(S[i]);
        }

        //검사 단어들을 차례대로 trie 에서 찾는다 : 존재하면 카운터 증가
        for (int i = 0; i < M; i++) {
            if (find(arr[i])) {
                answer++;
            }
        }

        System.out.println();
    }

    // trie 에 단어를 추가한다
    // 이미 존재하더라도 같은 과정을 거친다 : 노드의 추가 생성만 없다
    // 유사한 단어가 많을 경우 공간이 절약되지만
    // 특히 접두사가 다를 경우 많은 노드가 파생되어 생성되어야 한다
    // 하지만 단어 당 반드시 단어 길이만큼만 작동하므로 시간은 단어길이에 비례한다
    // 최악의 경우에도 최대단어의길이 * 단어의개수 만큼 작동하므로 결국 m*10000 으로 O(m)
    public static void insert(String word) {
        //처음에는 루트를 복사(얕은복사:공유 - 결국 하나의 줄기로 이어져야함)하여 시작
        //root 는 동일해야하므로 root 에서 시작한다
        //또한 Node 가 함수내 선언됨으로써 이후 노드에 대한 idx 를 기억할 필요가 없다
        //Node 자체가 객체 주소로서 현재위치와 다음위치를 알게된다
        Trie Node = root;

        //입력된 글자 길이동안
        for (int i = 0; i < word.length(); i++) {
            char alpha = word.charAt(i);
            //알파벳 길이 만큼(26) 노드가 생성되므로 (알파벳-유니코드)가 곧 인덱스 - char 는 필요없다
            int idx = alpha - 'a';

            //인덱스에 해당하는 노드가 아직 없으면 (== 해당 줄기로 이어진 단어가 없었다는 뜻)
            if (Node.node[idx] == null) {
                //해당 노드에 대하여 노드(26개짜리)를 또 만든다 : 알파벳 1개가 26개짜리 노드를 가짐
                Node.node[idx] = new Trie();
            }

            //for 문의 다음 위치는 인덱스가 가리키는 곳이어야 한다
            //이전에 방문을 했던 새로 만들었던 인덱스가 가리키는 곳으로 가야한다
            Node = Node.node[idx];
        }

        //for 문이 끝났다 == 단어의 알파벳을 모두 탐색했다
        //이때의 노드 == 마지막 노드이므로 해당 노드를 finish 처리한다
        //후에 find 할 때 사용해야한다
        Node.finish = true;
    }

    //입력받은 단어의 포함 여부를 탐색한다
    public static boolean find(String word) {
        Trie Node = root;

        //삽입과 마찬가지로 탐색할 단어의 길이만큼(해당 단어의 모든 알파벳) 반복한다
        for (int i = 0; i < word.length(); i++) {
            char alpha = word.charAt(i);
            //마찬가지로 인덱스가 필요하다
            int idx = alpha - 'a';

            //삽입할 때는 해당 인덱스의 노드가 없는 경우 삽입했지만
            if (Node.node[idx] == null) {
                //탐색할 때는 없으면 바로 종료 : trie 에 없다는 뜻이다 == 포함되지 않는다
                return false;
            }

            //노드에 존재하면 다음 인덱스에 해당하는 노드도 존재하는지 이동 : 단어가 끝날때까지 반복
            Node = Node.node[idx];
        }

        //단어의 마지막 글자에 도착하면 해당 인덱스에 해당하는 노드의 finish 여부를 반환한다
        //삽입시에 finish 처리된 인덱스라면 == 해당 단어가 존재한다면 : true 가 반환 되어 정답 카운터가 증가한다
        return Node.finish;
    }

    //trie 객체는 26개 짜리 노드와 finish 여부를 가진다
    public static class Trie {
        Trie[] node;
        boolean finish;

        public Trie() {
            //새로운 node 가 생길때 마다 26개 짜리(알파벳 개수만큼) node 가 생긴다
            this.node = new Trie[26];
            //이 값이 true 면 단어의 끝이라는 뜻이고 trie 에 포함된다는 뜻이다
            this.finish = false;
        }
    }

}
